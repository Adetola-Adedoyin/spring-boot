name: CI/CD Pipeline

on:
  push:
    branches: [master]
  workflow_dispatch:

env:
  AWS_REGION: us-east-1
  AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
  AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
  TF_VERSION: 1.8.0

jobs:

  terraform-init-plan:
    name: Terraform Init & Plan
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: ${{ env.TF_VERSION }}
          terraform_wrapper: false

      - name: Terraform Init
        working-directory: devops-springboot-infra/terraform/envs/dev
        run: terraform init

      - name: Terraform Validate
        working-directory: devops-springboot-infra/terraform/envs/dev
        run: terraform validate

      - name: Terraform Plan
        working-directory: devops-springboot-infra/terraform/envs/dev
        run: terraform plan -out=tfplan

      - name: Save Terraform Plan
        uses: actions/upload-artifact@v4
        with:
          name: tfplan
          path: devops-springboot-infra/terraform/envs/dev/tfplan
          retention-days: 1

      - name: Save Terraform Directory
        uses: actions/upload-artifact@v4
        with:
          name: terraform-dir
          path: devops-springboot-infra/terraform/envs/dev/
          retention-days: 1


  approval-apply:
    name: Wait for Approval Before Apply
    runs-on: ubuntu-latest
    needs: terraform-init-plan
    environment:
      name: apply-approval
    steps:
      - name: Approval Gate
        run: |
          echo "üîç Terraform plan completed successfully"
          echo "üëÄ Please review the plan and approve to proceed with infrastructure provisioning"
          echo "üìã This will create/modify AWS resources as defined in the Terraform configuration"


  terraform-apply:
    name: Terraform Apply and Extract Outputs
    runs-on: ubuntu-latest
    needs: approval-apply
    outputs:
      ec2_ip: ${{ steps.get_ip.outputs.ec2_ip }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: ${{ env.TF_VERSION }}
          terraform_wrapper: false

      - name: Download Terraform Plan
        uses: actions/download-artifact@v4
        with:
          name: tfplan
          path: devops-springboot-infra/terraform/envs/dev

      - name: Download Terraform Directory
        uses: actions/download-artifact@v4
        with:
          name: terraform-dir
          path: devops-springboot-infra/terraform/envs/dev

      - name: Terraform Init
        working-directory: devops-springboot-infra/terraform/envs/dev
        run: terraform init

      - name: Terraform Apply
        working-directory: devops-springboot-infra/terraform/envs/dev
        run: terraform apply -auto-approve tfplan

      - name: Get EC2 IP
        id: get_ip
        working-directory: devops-springboot-infra/terraform/envs/dev
        run: |
          EC2_IP=$(terraform output -raw ec2_public_ip)
          echo "ec2_ip=$EC2_IP" >> $GITHUB_OUTPUT
          echo "üåê EC2 Public IP: $EC2_IP"

      - name: Extract Private Key
        working-directory: devops-springboot-infra/terraform/envs/dev
        run: |
          terraform output -raw private_key_pem > private_key.pem
          chmod 600 private_key.pem
          echo "üîê Private key extracted and secured"

      - name: Save Private Key
        uses: actions/upload-artifact@v4
        with:
          name: private-key
          path: devops-springboot-infra/terraform/envs/dev/private_key.pem
          retention-days: 1

      - name: Save Terraform State
        uses: actions/upload-artifact@v4
        with:
          name: terraform-state
          path: devops-springboot-infra/terraform/envs/dev/
          retention-days: 1


  deploy-app:
    name: Deploy Spring Boot App
    runs-on: ubuntu-latest
    needs: terraform-apply
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Download Private Key
        uses: actions/download-artifact@v4
        with:
          name: private-key
          path: ./

      - name: Setup SSH Key
        run: |
          chmod 600 private_key.pem
          echo "üîë SSH key configured"

      - name: Wait for EC2 Instance to be Ready
        run: |
          echo "‚è≥ Waiting for EC2 instance to be fully ready..."
          sleep 30

      - name: SSH and Start Spring Boot App
        run: |
          EC2_IP="${{ needs.terraform-apply.outputs.ec2_ip }}"
          echo "üöÄ Deploying application to EC2 instance: $EC2_IP"
          
          ssh -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null -o ConnectTimeout=30 \
              -i private_key.pem ubuntu@$EC2_IP << 'EOF'
            echo "üì¶ Starting Spring Boot application service..."
            
            # Check if service exists and start it
            if systemctl list-unit-files | grep -q springboot-app.service; then
              echo "‚úÖ Service found, starting springboot-app.service"
              sudo systemctl start springboot-app.service
              sudo systemctl enable springboot-app.service
              
              # Check service status
              sudo systemctl status springboot-app.service --no-pager
              
              echo "üéâ Spring Boot application deployed successfully!"
            else
              echo "‚ö†Ô∏è  springboot-app.service not found. Please ensure the service is properly configured."
              exit 1
            fi
          EOF

      - name: Verify Deployment
        run: |
          EC2_IP="${{ needs.terraform-apply.outputs.ec2_ip }}"
          echo "üîç Verifying application deployment..."
          echo "üìç Application should be accessible at: http://$EC2_IP:8080"


  manual-destroy-approval:
    name: Manual Approval to Destroy
    runs-on: ubuntu-latest
    needs: deploy-app
    environment:
      name: destroy-approval
    steps:
      - name: Wait for Approval to Destroy
        run: |
          echo "üèóÔ∏è  Infrastructure and application deployment completed successfully"
          echo "üí∞ Approve this step to destroy the infrastructure and save costs"
          echo "‚ö†Ô∏è  This will completely tear down all AWS resources"
          echo "üìç EC2 Instance IP: ${{ needs.terraform-apply.outputs.ec2_ip }}"


  terraform-destroy:
    name: Terraform Destroy
    runs-on: ubuntu-latest
    needs: manual-destroy-approval
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: ${{ env.TF_VERSION }}

      - name: Download Terraform State
        uses: actions/download-artifact@v4
        with:
          name: terraform-state
          path: devops-springboot-infra/terraform/envs/dev

      - name: Terraform Init
        working-directory: devops-springboot-infra/terraform/envs/dev
        run: terraform init

      - name: Terraform Destroy
        working-directory: devops-springboot-infra/terraform/envs/dev
        run: |
          echo "üí• Destroying infrastructure..."
          terraform destroy -auto-approve
          echo "‚úÖ Infrastructure destroyed successfully"

      - name: Cleanup
        run: |
          echo "üßπ Cleaning up sensitive artifacts..."
          rm -f private_key.pem
          echo "‚úÖ Cleanup completed"
