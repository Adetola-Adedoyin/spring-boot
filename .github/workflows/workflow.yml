name: CI/CD Pipeline

on:
  push:
    branches: [master]
  workflow_dispatch:

env:
  AWS_REGION: us-east-1
  AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
  AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
  TF_VERSION: 1.8.0

jobs:

  terraform-init-plan:
    name: Terraform Init & Plan
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: ${{ env.TF_VERSION }}

      - name: Terraform Init
        working-directory: devops-springboot-infra/terraform/envs/dev
        run: terraform init

      - name: Terraform Plan
        working-directory: devops-springboot-infra/terraform/envs/dev
        run: terraform plan -out=tfplan

      - name: Save Terraform Plan
        uses: actions/upload-artifact@v4
        with:
          name: tfplan
          path: devops-springboot-infra/terraform/envs/dev/tfplan


  approval-apply:
    name: Wait for Approval Before Apply
    runs-on: ubuntu-latest
    needs: terraform-init-plan
    environment:
      name: apply-approval
    steps:
      - name: Approval Gate
        run: echo "Waiting for manual approval to proceed with apply..."


  terraform-apply:
    name: Terraform Apply and Extract Outputs
    runs-on: ubuntu-latest
    needs: approval-apply
    outputs:
      ec2_ip: ${{ steps.get_ip.outputs.ec2_ip }}
      private_key: ${{ steps.get_key.outputs.private_key }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: ${{ env.TF_VERSION }}

      - name: Download Terraform Plan
        uses: actions/download-artifact@v4
        with:
          name: tfplan
          path: devops-springboot-infra/terraform/envs/dev

      - name: Terraform Init
        working-directory: devops-springboot-infra/terraform/envs/dev
        run: terraform init

      - name: Terraform Apply
        working-directory: devops-springboot-infra/terraform/envs/dev
        run: terraform apply -auto-approve tfplan

      - name: Get EC2 IP
        id: get_ip
        working-directory: devops-springboot-infra/terraform/envs/dev
        run: |
          echo "ec2_ip=$(terraform output -raw ec2_public_ip)" >> $GITHUB_OUTPUT

      - name: Get Private Key
        id: get_key
        working-directory: devops-springboot-infra/terraform/envs/dev
        run: |
          PRIVATE_KEY=$(terraform output -raw private_key_pem)
          echo "PRIVATE_KEY<<EOF" >> $GITHUB_ENV
          echo "$PRIVATE_KEY" >> $GITHUB_ENV
          echo "EOF" >> $GITHUB_ENV


  deploy-app:
    name: Deploy Spring Boot App
    runs-on: ubuntu-latest
    needs: terraform-apply
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Write SSH Private Key
        run: |
          echo "$PRIVATE_KEY" > private_key.pem
          chmod 600 private_key.pem

      - name: SSH and Start Spring Boot App
        run: |
          ssh -o StrictHostKeyChecking=no -i private_key.pem ubuntu@${{ needs.terraform-apply.outputs.ec2_ip }} \
          'sudo systemctl start springboot-app.service'


  manual-destroy-approval:
    name: Manual Approval to Destroy
    runs-on: ubuntu-latest
    needs: deploy-app
    environment:
      name: destroy-approval
    steps:
      - name: Wait for Approval to Destroy
        run: echo "Waiting for manual approval to destroy infrastructure."


  terraform-destroy:
    name: Terraform Destroy
    runs-on: ubuntu-latest
    needs: manual-destroy-approval
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: ${{ env.TF_VERSION }}

      - name: Terraform Init
        working-directory: devops-springboot-infra/terraform/envs/dev
        run: terraform init

      - name: Terraform Destroy
        working-directory: devops-springboot-infra/terraform/envs/dev
        run: terraform destroy -auto-approve
