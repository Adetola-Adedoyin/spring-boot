name: CI/CD Pipeline

on:
  push:
    branches: [master]
  workflow_dispatch:

env:
  AWS_REGION: us-east-1
  TF_VERSION: 1.8.0
  TF_WORKING_DIR: devops-springboot-infra/terraform/envs/dev

jobs:
  terraform-init-plan:
    name: Terraform Init & Plan
    runs-on: ubuntu-latest
    outputs:
      tfplan: terraform-plan
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: ${{ env.TF_VERSION }}

      - name: Terraform Init
        id: init
        working-directory: ${{ env.TF_WORKING_DIR }}
        run: terraform init

      - name: Terraform Plan
        id: plan
        working-directory: ${{ env.TF_WORKING_DIR }}
        run: terraform plan -out=tfplan

      - name: Upload Terraform Plan
        uses: actions/upload-artifact@v4
        with:
          name: terraform-plan
          path: ${{ env.TF_WORKING_DIR }}/tfplan
          retention-days: 1

  terraform-apply-deploy:
    name: Terraform Apply & Deploy
    runs-on: ubuntu-latest
    needs: terraform-init-plan
    environment: apply-approval
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: ${{ env.TF_VERSION }}

      - name: Download Terraform Plan
        uses: actions/download-artifact@v4
        with:
          name: terraform-plan
          path: ${{ env.TF_WORKING_DIR }}

      - name: Terraform Init
        working-directory: ${{ env.TF_WORKING_DIR }}
        run: terraform init

      - name: Terraform Apply
        id: apply
        working-directory: ${{ env.TF_WORKING_DIR }}
        run: terraform apply -auto-approve tfplan

      - name: Get EC2 IP
        id: get_ip
        working-directory: ${{ env.TF_WORKING_DIR }}
        run: |
          EC2_IP=$(terraform output -raw public_ip)
          echo "ec2_ip=$EC2_IP" >> $GITHUB_OUTPUT

      - name: SSH and Start Spring Boot App
        run: |
          EC2_IP="${{ steps.get_ip.outputs.ec2_ip }}"
          PRIVATE_KEY_PEM=$(terraform output -raw private_key_pem)

          echo "$PRIVATE_KEY_PEM" > private_key.pem
          chmod 600 private_key.pem

          ssh -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null -i private_key.pem ubuntu@$EC2_IP '
            sudo systemctl start springboot-app.service
            sudo systemctl enable springboot-app.service
          '
          
  terraform-destroy:
    name: Terraform Destroy
    runs-on: ubuntu-latest
    needs: terraform-apply-deploy
    environment: destroy-approval
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: ${{ env.TF_VERSION }}

      - name: Terraform Init
        working-directory: ${{ env.TF_WORKING_DIR }}
        run: terraform init

      - name: Terraform Destroy
        working-directory: ${{ env.TF_WORKING_DIR }}
        run: terraform destroy -auto-approve
